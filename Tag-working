import boto3

def lambda_handler(event, context):
    # Initialize AWS clients
    s3_client = boto3.client('s3')
    rds_client = boto3.client('rds')
    appsync_client = boto3.client('appsync')
    dynamodb_client = boto3.client('dynamodb')

    # Specify the resources (Comment out the resources you don't want to tag)
    s3_bucket_name = "amplify-cboinnovapptiveuat-testauto-6b59b-deployment"
    rds_instance_name = "YourRDSInstanceName"  # Provide the correct RDS instance name
    appsync_api_arn = "arn:aws:appsync:us-east-1:838175451497:apis/5iix3eecfrbftmwu7ambv4fihq"
    specific_value = "testautwo"  # For DynamoDB

    # Example tags to add
    tags = [
        {'Key': 'Environment', 'Value': 'Production'},
        {'Key': 'Tenant', 'Value': 'TenantXYZ'}
    ]

    # Add tags to S3 bucket if specified
    if 's3_bucket_name' in locals():
        add_tags_to_s3(s3_client, s3_bucket_name, tags)

    # Add tags to RDS instance if specified
    if 'rds_instance_name' in locals():
        add_tags_to_rds(rds_client, rds_instance_name, tags)

    # Add tags to AppSync API if specified
    if 'appsync_api_arn' in locals():
        add_tags_to_appsync(appsync_client, appsync_api_arn, tags)

    # Add tags to DynamoDB tables if specified
    if 'specific_value' in locals():
        add_tags_to_dynamodb(dynamodb_client, specific_value, tags)

    return {
        'statusCode': 200,
        'body': 'Tags added successfully'
    }

def add_tags_to_s3(client, bucket_name, tags):
    try:
        existing_tags = client.get_bucket_tagging(Bucket=bucket_name).get('TagSet', [])
        existing_tags_dict = {tag['Key']: tag['Value'] for tag in existing_tags}
        
        for tag in tags:
            existing_tags_dict[tag['Key']] = tag['Value']
        
        tags_to_apply = [{'Key': key, 'Value': value} for key, value in existing_tags_dict.items()]
        
        client.put_bucket_tagging(
            Bucket=bucket_name,
            Tagging={'TagSet': tags_to_apply}
        )
        print(f'Tags added to S3 bucket: {bucket_name}')
    except client.exceptions.NoSuchTagSet:
        client.put_bucket_tagging(
            Bucket=bucket_name,
            Tagging={'TagSet': tags}
        )
        print(f'Tags added to S3 bucket: {bucket_name}')
    except Exception as e:
        print(f'Error adding tags to S3 bucket {bucket_name}: {e}')

def add_tags_to_rds(client, instance_name, tags):
    try:
        response = client.describe_db_instances(DBInstanceIdentifier=instance_name)
        if len(response['DBInstances']) > 0:
            instance_arn = response['DBInstances'][0]['DBInstanceArn']
            client.add_tags_to_resource(
                ResourceName=instance_arn,
                Tags=tags
            )
            print(f'Tags added to RDS instance with name: {instance_name}')
        else:
            print(f'RDS instance with name {instance_name} not found')
    except Exception as e:
        print(f'Error adding tags to RDS instance with name {instance_name}: {e}')

def add_tags_to_appsync(client, api_arn, tags):
    try:
        client.tag_resource(
            resourceArn=api_arn,
            tags={tag['Key']: tag['Value'] for tag in tags}
        )
        print(f'Tags added to AppSync API with ARN: {api_arn}')
    except Exception as e:
        print(f'Error adding tags to AppSync API with ARN {api_arn}: {e}')

def add_tags_to_dynamodb(client, specific_value, tags):
    try:
        paginator = client.get_paginator('list_tables')
        for page in paginator.paginate():
            for table_name in page['TableNames']:
                if specific_value in table_name:
                    table_arn = client.describe_table(TableName=table_name)['Table']['TableArn']
                    client.tag_resource(
                        ResourceArn=table_arn,
                        Tags=tags
                    )
                    print(f'Tags added to DynamoDB table with name: {table_name}')
    except Exception as e:
        print(f'Error adding tags to DynamoDB tables: {e}')

